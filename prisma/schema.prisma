generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  email             String    @unique @db.VarChar(255)
  password_hash     String    @db.VarChar(255)
  name              String    @db.VarChar(255)
  role_id           Int
  availability_date DateTime? @db.Date
  created_at        DateTime  @default(now()) @db.Timestamp(6)
  updated_at        DateTime  @updatedAt @db.Timestamp(6)

  // Relations
  role Role @relation(fields: [role_id], references: [id])

  // Reverse relations
  timesheets             Timesheet[]
  forecast_plans         ForecastPlan[]
  owned_projects         Project[]
  audit_logs             AuditLog[]
  user_resource_managers UserResourceManagers[] @relation("UserToRM")
  managed_users          UserResourceManagers[] @relation("RMToUser")

  @@map("users")
}

model UserResourceManagers {
  id         Int      @id @default(autoincrement())
  user_id    Int
  rm_user_id Int
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)

  // Relations
  user User @relation("UserToRM", fields: [user_id], references: [id])
  rm   User @relation("RMToUser", fields: [rm_user_id], references: [id])

  @@map("user_resource_managers")
}

model Project {
  id            String   @id @default(uuid()) @db.Uuid
  project_name  String   @db.VarChar(255)
  owner_user_id Int
  is_active     Boolean  @default(true)
  created_at    DateTime @default(now()) @db.Timestamp(6)
  updated_at    DateTime @updatedAt @db.Timestamp(6)

  // Relations
  owner            User            @relation(fields: [owner_user_id], references: [id])
  codes            Code[]
  forecast_entries ForecastEntry[]

  @@map("projects")
}

model Code {
  id             String   @id @default(uuid()) @db.Uuid
  project_id     String?  @db.Uuid
  code           String   @unique @db.VarChar(50)
  description    String   @db.Text
  is_system_code Boolean  @default(false)
  start_date     DateTime @db.Date
  expiry_date    DateTime @db.Date
  is_active      Boolean  @default(true)
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @updatedAt @db.Timestamp(6)

  // Relations
  project    Project?   @relation(fields: [project_id], references: [id])
  work_items WorkItem[]

  @@map("codes")
}

model WorkItem {
  id             String   @id @default(uuid()) @db.Uuid
  code_id        String   @db.Uuid
  work_item_code String   @db.VarChar(50)
  description    String   @db.Text
  is_active      Boolean  @default(true)
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @updatedAt @db.Timestamp(6)

  // Relations
  code       Code       @relation(fields: [code_id], references: [id])
  bill_codes BillCode[]

  @@map("work_items")
}

model BillCode {
  id              String   @id @default(uuid()) @db.Uuid
  work_item_id    String   @db.Uuid
  bill_code       String   @db.VarChar(50)
  bill_name       String   @db.VarChar(255)
  is_billable     Boolean  @default(true)
  is_forecastable Boolean  @default(false)
  is_active       Boolean  @default(true)
  created_at      DateTime @default(now()) @db.Timestamp(6)
  updated_at      DateTime @updatedAt @db.Timestamp(6)

  // Relations
  work_item         WorkItem         @relation(fields: [work_item_id], references: [id])
  timesheet_entries TimesheetEntry[]
  forecast_entries  ForecastEntry[]

  @@map("bill_codes")
}

model TimesheetStatus {
  id          Int    @id @default(autoincrement())
  name        String @unique @db.VarChar(50)
  description String @db.Text

  // Reverse relations
  timesheets Timesheet[]

  @@map("timesheet_statuses")
}

model Timesheet {
  id           String    @id @default(uuid()) @db.Uuid
  user_id      Int
  week_ending  DateTime  @db.Date
  status_id    Int
  submitted_at DateTime? @db.Timestamp(6)
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  updated_at   DateTime  @updatedAt @db.Timestamp(6)

  // Relations
  user              User             @relation(fields: [user_id], references: [id])
  status            TimesheetStatus  @relation(fields: [status_id], references: [id])
  timesheet_entries TimesheetEntry[]

  @@unique([user_id, week_ending])
  @@map("timesheets")
}

model Role {
  id          Int    @id @default(autoincrement())
  name        String @unique @db.VarChar(50)
  description String @db.Text

  // Reverse relations
  users User[]

  @@map("roles")
}

model TimesheetEntry {
  id           String   @id @default(uuid()) @db.Uuid
  timesheet_id String   @db.Uuid
  bill_code_id String   @db.Uuid
  work_date    DateTime @db.Date
  hours        Int
  created_at   DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @updatedAt @db.Timestamp(6)

  // Relations
  timesheet Timesheet @relation(fields: [timesheet_id], references: [id])
  bill_code BillCode  @relation(fields: [bill_code_id], references: [id])

  @@unique([timesheet_id, bill_code_id, work_date])
  @@map("timesheet_entries")
}

model ForecastPlan {
  id           String   @id @default(uuid()) @db.Uuid
  user_id      Int
  submitted_at DateTime @db.Timestamp(6)
  created_at   DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @updatedAt @db.Timestamp(6)

  // Relations
  user             User            @relation(fields: [user_id], references: [id])
  forecast_entries ForecastEntry[]

  @@map("forecast_plans")
}

model ForecastEntry {
  id               String   @id @default(uuid()) @db.Uuid
  forecast_plan_id String   @db.Uuid
  category_id      Int
  project_id       String?  @db.Uuid
  bill_code_id     String?  @db.Uuid
  from_date        DateTime @db.Date
  to_date          DateTime @db.Date
  hours_per_week   Int
  created_at       DateTime @default(now()) @db.Timestamp(6)
  updated_at       DateTime @updatedAt @db.Timestamp(6)

  // Relations
  forecast_plan ForecastPlan @relation(fields: [forecast_plan_id], references: [id])
  category      Category     @relation(fields: [category_id], references: [id])
  project       Project?     @relation(fields: [project_id], references: [id])
  bill_code     BillCode?    @relation(fields: [bill_code_id], references: [id])

  @@map("forecast_entries")
}

model Category {
  id              Int    @id @default(autoincrement())
  assignment_type String @db.VarChar(50)
  category_name   String @db.VarChar(100)
  description     String @db.Text

  // Reverse relations
  forecast_entries ForecastEntry[]

  @@map("categories")
}

model AuditLog {
  id         String   @id @default(uuid()) @db.Uuid
  table_name String   @db.VarChar(50)
  record_id  String
  action     String   @db.VarChar(50)
  old_values Json?    @db.JsonB
  new_values Json?    @db.JsonB
  changed_by Int
  changed_at DateTime @db.Timestamp(6)

  // Relations
  user User @relation(fields: [changed_by], references: [id])

  @@index([table_name, record_id])
  @@index([changed_by])
  @@index([changed_at])
  @@map("audit_logs")
}
